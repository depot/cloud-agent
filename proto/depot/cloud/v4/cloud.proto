syntax = "proto3";

package depot.cloud.v4;

service CloudService {
  rpc GetDesiredState(GetDesiredStateRequest) returns (GetDesiredStateResponse) {}
  rpc ReportCurrentState(ReportCurrentStateRequest) returns (ReportCurrentStateResponse) {}
  rpc ReportErrors(ReportErrorsRequest) returns (ReportErrorsResponse);
  rpc GetActiveAgentVersion(GetActiveAgentVersionRequest) returns (GetActiveAgentVersionResponse);
  rpc ReconcileVolumes(ReconcileVolumesRequest) returns (stream ReconcileVolumesResponse) {}
  rpc ReportVolumeUpdates(ReportVolumeUpdatesRequest) returns (ReportVolumeUpdatesResponse) {}
  rpc ReplaceVolume(ReplaceVolumeRequest) returns (ReplaceVolumeResponse) {}
}

// Messages

message GetDesiredStateRequest {
  string client_id = 1;
}

message GetDesiredStateResponse {
  repeated NewMachine new_machines = 1;
  repeated NewVolume new_volumes = 2;
  repeated MachineChange machine_changes = 3;
  repeated VolumeChange volume_changes = 4;

  message NewMachine {
    string id = 1;
    Kind kind = 2;
    Architecture architecture = 3;
    string image = 4;
    SecurityGroup security_group = 5;
    RootVolume root_volume = 6;
    optional string user_data = 7;
    optional FlyMachineOptions fly_options = 8;
    optional string zone = 9;

    message FlyMachineOptions {
      // Volume to attach to the machine.
      string volume_id = 1;
      // File path/content to write to the fly machine.
      map<string, string> files = 2;
    }
  }

  message NewVolume {
    string id = 1;
    Kind kind = 2;
    Architecture architecture = 3;
    int32 size = 4;
    optional string zone = 5;
  }

  message MachineChange {
    string id = 1;
    MachineState desired_state = 2;
  }

  message VolumeChange {
    string id = 1;
    VolumeState desired_state = 2;
    optional string attached_to = 3;
    optional string device = 4;
  }

  enum Architecture {
    ARCHITECTURE_UNSPECIFIED = 0;
    ARCHITECTURE_X86 = 1;
    ARCHITECTURE_ARM = 2;
  }

  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_BUILDKIT = 1;
    KIND_BUILDKIT_16X32_GPU = 2;
    KIND_BUILDKIT_16X32 = 3;
    KIND_BUILDKIT_8X16 = 4;
    KIND_BUILDKIT_4X8 = 5;
    KIND_BUILDKIT_4X4 = 6;
    KIND_BUILDKIT_8X8 = 7;
  }

  enum MachineState {
    MACHINE_STATE_UNSPECIFIED = 0;
    MACHINE_STATE_PENDING = 1;
    MACHINE_STATE_RUNNING = 2;
    MACHINE_STATE_STOPPING = 3;
    MACHINE_STATE_STOPPED = 4;
    MACHINE_STATE_DELETING = 5;
    MACHINE_STATE_DELETED = 6;
    MACHINE_STATE_ERROR = 7;
  }

  enum SecurityGroup {
    SECURITY_GROUP_UNSPECIFIED = 0;
    SECURITY_GROUP_DEFAULT = 1;
    SECURITY_GROUP_BUILDKIT = 2;
  }

  enum VolumeState {
    VOLUME_STATE_UNSPECIFIED = 0;
    VOLUME_STATE_PENDING = 1;
    VOLUME_STATE_AVAILABLE = 2;
    VOLUME_STATE_ATTACHED = 3;
    VOLUME_STATE_DELETED = 4;
    VOLUME_STATE_ERROR = 5;
  }

  message RootVolume {
    string device_name = 1;
    int32 size = 2;
  }
}

message ReplaceVolumeRequest {
  string id = 1;
}

message ReplaceVolumeResponse {}

message ReportCurrentStateRequest {
  CloudState state = 1;
  string client_id = 2;
}

message ReportCurrentStateResponse {}

message ReportErrorsRequest {
  repeated string errors = 1;
}

message ReportErrorsResponse {}

message GetActiveAgentVersionRequest {}

message GetActiveAgentVersionResponse {
  string newer_than = 1;
  optional bool connection_deleted = 2;
}

// Objects

message CloudState {
  oneof state {
    Aws aws = 1;
    Fly fly = 2;
  }

  message Aws {
    string availability_zone = 1;
    string state = 2;
  }

  message Fly {
    string region = 1;
    string state = 2;
  }
}

message ReconcileVolumesRequest {
  string client_id = 1;
}

message ReconcileVolumesResponse {
  oneof action {
    CreateVolumeAction create_volume = 1;
    ResizeVolumeAction resize_volume = 2;
    DeleteVolumeAction delete_volume = 3;

    CreateClientAction create_client = 4;
    AuthorizeClientAction authorize_client = 5;
    DeleteClientAction delete_client = 6;

    TrimVolumeAction trim_volume = 7;

    CopyVolumeAction copy_volume = 8;
  }
}

message ReportVolumeUpdatesRequest {
  oneof update {
    CreateVolumeUpdate create_volume = 1;
    ResizeVolumeUpdate resize_volume = 2;
    DeleteVolumeUpdate delete_volume = 3;

    CreateClientUpdate create_client = 4;
    AuthorizeClientUpdate authorize_client = 5;
    DeleteClientUpdate delete_client = 6;

    TrimVolumeUpdate trim_volume = 7;
    CopyVolumeUpdate copy_volume = 8;
  }
}

message ReportVolumeUpdatesResponse {}

message CreateVolumeAction {
  string volume_name = 1;
  // Size in GB
  int32 size = 3;
}

message CreateVolumeUpdate {
  string volume_name = 1;
  // Image ID to use for the volume.
  string image_spec = 2;
}

message TrimVolumeAction {
  string volume_name = 1;
}

message TrimVolumeUpdate {
  string volume_name = 1;
}

message ResizeVolumeAction {
  string volume_name = 1;
  // Size in GB
  int32 size = 3;
  string image_spec = 4;
}

message ResizeVolumeUpdate {
  string volume_name = 1;
}

message DeleteVolumeAction {
  string volume_name = 1;
  string image_spec = 2;
}

message DeleteVolumeUpdate {
  string volume_name = 1;
}

message CreateClientAction {
  string client_name = 1;
}

// machine_name is now associated with client_name.
// client_name is not authorized until `AuthorizeClientAction` is called.
message CreateClientUpdate {
  string client_name = 1;
  // key is the contents of the keyfile.
  string key = 2;
  // config is the contents of the ceph.conf file.
  string config = 3;
}

message DeleteClientAction {
  string client_name = 1;
}

message DeleteClientUpdate {
  string client_name = 1;
}

// AuthorizeClientRequest gives client_name access to volume.
message AuthorizeClientAction {
  string volume_name = 1;
  string client_name = 2;
  string image_spec = 3;
}

// rbd device map {image_spec} --name {client_name} --keyfile {file w/ key}
message AuthorizeClientUpdate {
  string client_name = 1;
  string volume_name = 2;
  string image_spec = 3;
}

message CopyVolumeAction {
  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_SNAPSHOT = 1;
    KIND_CLONE = 2;
  }

  Kind kind = 1;
  string volume_name = 2;
  // The parent spec is the volume id of the volume that the snapshot or clone is a child of.
  string parent_image_spec = 3;
}

message CopyVolumeUpdate {
  enum Kind {
    KIND_UNSPECIFIED = 0;
    KIND_SNAPSHOT = 1;
    KIND_CLONE = 2;
  }
  Kind kind = 1;
  string volume_name = 2;
  string image_spec = 3;
  string parent_image_spec = 4;
}
