// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// Source: depot/cloud/v1/cloud.proto
/* eslint-disable */

import type {ByteSource} from 'protoscript'
import {BinaryReader, BinaryWriter} from 'protoscript'
import type {ClientConfiguration} from 'twirpscript'
import {JSONrequest, PBrequest} from 'twirpscript'
// This is the minimum version supported by the current runtime.
// If this line fails typechecking, breaking changes have been introduced and this
// file needs to be regenerated by running `npx twirpscript`.
export {MIN_SUPPORTED_VERSION_0_0_56} from 'twirpscript'

//========================================//
//                 Types                  //
//========================================//

export interface CloudState {
  aws?: CloudState.Aws | null | undefined
}

export declare namespace CloudState {
  export interface Aws {
    availabilityZone: string
    state: string
  }
}

export interface CloudStatePatch {
  aws?: CloudStatePatch.Aws | null | undefined
  generation: number
}

export declare namespace CloudStatePatch {
  export interface Aws {
    patch: string
  }
}

export interface ReplaceCloudStateRequest {
  connectionId: string
  state: CloudState
}

export interface ReplaceCloudStateResponse {
  generation: number
}

export interface PatchCloudStateRequest {
  connectionId: string
  patch: CloudStatePatch
}

export interface PatchCloudStateResponse {
  generation: number
}

export interface SetLastErrorsRequest {
  connectionId: string
  errors: string[]
}

export interface SetLastErrorsResponse {}

export interface GetDesiredStateRequest {
  connectionId: string
}

export interface GetDesiredStateResponse {
  newMachines: GetDesiredStateResponse.NewMachine[]
  newVolumes: GetDesiredStateResponse.NewVolume[]
  machineChanges: GetDesiredStateResponse.MachineChange[]
  volumeChanges: GetDesiredStateResponse.VolumeChange[]
}

export declare namespace GetDesiredStateResponse {
  export type Architecture = 'ARCHITECTURE_UNSPECIFIED' | 'ARCHITECTURE_X86' | 'ARCHITECTURE_ARM'

  export type Kind = 'KIND_UNSPECIFIED' | 'KIND_BUILDKIT'

  export type MachineState =
    | 'MACHINE_STATE_UNSPECIFIED'
    | 'MACHINE_STATE_PENDING'
    | 'MACHINE_STATE_RUNNING'
    | 'MACHINE_STATE_STOPPING'
    | 'MACHINE_STATE_STOPPED'
    | 'MACHINE_STATE_DELETING'
    | 'MACHINE_STATE_DELETED'
    | 'MACHINE_STATE_ERROR'

  export type SecurityGroup = 'SECURITY_GROUP_UNSPECIFIED' | 'SECURITY_GROUP_DEFAULT' | 'SECURITY_GROUP_BUILDKIT'

  export type VolumeState =
    | 'VOLUME_STATE_UNSPECIFIED'
    | 'VOLUME_STATE_PENDING'
    | 'VOLUME_STATE_AVAILABLE'
    | 'VOLUME_STATE_ATTACHED'
    | 'VOLUME_STATE_DELETED'
    | 'VOLUME_STATE_ERROR'

  export interface NewMachine {
    id: string
    realm: string
    kind: GetDesiredStateResponse.Kind
    architecture: GetDesiredStateResponse.Architecture
    image: string
    securityGroup: GetDesiredStateResponse.SecurityGroup
  }

  export interface NewVolume {
    id: string
    realm: string
    kind: GetDesiredStateResponse.Kind
    architecture: GetDesiredStateResponse.Architecture
    size: number
  }

  export interface MachineChange {
    id: string
    desiredState: GetDesiredStateResponse.MachineState
  }

  export interface VolumeChange {
    id: string
    desiredState: GetDesiredStateResponse.VolumeState
    attachedTo?: string | null | undefined
    device?: string | null | undefined
  }
}

//========================================//
//      CloudService Protobuf Client      //
//========================================//

export async function ReplaceCloudState(
  replaceCloudStateRequest: ReplaceCloudStateRequest,
  config?: ClientConfiguration,
): Promise<ReplaceCloudStateResponse> {
  const response = await PBrequest(
    '/depot.cloud.v1.CloudService/ReplaceCloudState',
    ReplaceCloudStateRequest.encode(replaceCloudStateRequest),
    config,
  )
  return ReplaceCloudStateResponse.decode(response)
}

export async function PatchCloudState(
  patchCloudStateRequest: PatchCloudStateRequest,
  config?: ClientConfiguration,
): Promise<PatchCloudStateResponse> {
  const response = await PBrequest(
    '/depot.cloud.v1.CloudService/PatchCloudState',
    PatchCloudStateRequest.encode(patchCloudStateRequest),
    config,
  )
  return PatchCloudStateResponse.decode(response)
}

export async function SetLastErrors(
  setLastErrorsRequest: SetLastErrorsRequest,
  config?: ClientConfiguration,
): Promise<SetLastErrorsResponse> {
  const response = await PBrequest(
    '/depot.cloud.v1.CloudService/SetLastErrors',
    SetLastErrorsRequest.encode(setLastErrorsRequest),
    config,
  )
  return SetLastErrorsResponse.decode(response)
}

export async function GetDesiredState(
  getDesiredStateRequest: GetDesiredStateRequest,
  config?: ClientConfiguration,
): Promise<GetDesiredStateResponse> {
  const response = await PBrequest(
    '/depot.cloud.v1.CloudService/GetDesiredState',
    GetDesiredStateRequest.encode(getDesiredStateRequest),
    config,
  )
  return GetDesiredStateResponse.decode(response)
}

//========================================//
//        CloudService JSON Client        //
//========================================//

export async function ReplaceCloudStateJSON(
  replaceCloudStateRequest: ReplaceCloudStateRequest,
  config?: ClientConfiguration,
): Promise<ReplaceCloudStateResponse> {
  const response = await JSONrequest(
    '/depot.cloud.v1.CloudService/ReplaceCloudState',
    ReplaceCloudStateRequestJSON.encode(replaceCloudStateRequest),
    config,
  )
  return ReplaceCloudStateResponseJSON.decode(response)
}

export async function PatchCloudStateJSON(
  patchCloudStateRequest: PatchCloudStateRequest,
  config?: ClientConfiguration,
): Promise<PatchCloudStateResponse> {
  const response = await JSONrequest(
    '/depot.cloud.v1.CloudService/PatchCloudState',
    PatchCloudStateRequestJSON.encode(patchCloudStateRequest),
    config,
  )
  return PatchCloudStateResponseJSON.decode(response)
}

export async function SetLastErrorsJSON(
  setLastErrorsRequest: SetLastErrorsRequest,
  config?: ClientConfiguration,
): Promise<SetLastErrorsResponse> {
  const response = await JSONrequest(
    '/depot.cloud.v1.CloudService/SetLastErrors',
    SetLastErrorsRequestJSON.encode(setLastErrorsRequest),
    config,
  )
  return SetLastErrorsResponseJSON.decode(response)
}

export async function GetDesiredStateJSON(
  getDesiredStateRequest: GetDesiredStateRequest,
  config?: ClientConfiguration,
): Promise<GetDesiredStateResponse> {
  const response = await JSONrequest(
    '/depot.cloud.v1.CloudService/GetDesiredState',
    GetDesiredStateRequestJSON.encode(getDesiredStateRequest),
    config,
  )
  return GetDesiredStateResponseJSON.decode(response)
}

//========================================//
//              CloudService              //
//========================================//

export interface CloudService<Context = unknown> {
  ReplaceCloudState: (
    replaceCloudStateRequest: ReplaceCloudStateRequest,
    context: Context,
  ) => Promise<ReplaceCloudStateResponse> | ReplaceCloudStateResponse
  PatchCloudState: (
    patchCloudStateRequest: PatchCloudStateRequest,
    context: Context,
  ) => Promise<PatchCloudStateResponse> | PatchCloudStateResponse
  SetLastErrors: (
    setLastErrorsRequest: SetLastErrorsRequest,
    context: Context,
  ) => Promise<SetLastErrorsResponse> | SetLastErrorsResponse
  GetDesiredState: (
    getDesiredStateRequest: GetDesiredStateRequest,
    context: Context,
  ) => Promise<GetDesiredStateResponse> | GetDesiredStateResponse
}

export function createCloudService<Context>(service: CloudService<Context>) {
  return {
    name: 'depot.cloud.v1.CloudService',
    methods: {
      ReplaceCloudState: {
        name: 'ReplaceCloudState',
        handler: service.ReplaceCloudState,
        input: {
          protobuf: ReplaceCloudStateRequest,
          json: ReplaceCloudStateRequestJSON,
        },
        output: {
          protobuf: ReplaceCloudStateResponse,
          json: ReplaceCloudStateResponseJSON,
        },
      },
      PatchCloudState: {
        name: 'PatchCloudState',
        handler: service.PatchCloudState,
        input: {
          protobuf: PatchCloudStateRequest,
          json: PatchCloudStateRequestJSON,
        },
        output: {
          protobuf: PatchCloudStateResponse,
          json: PatchCloudStateResponseJSON,
        },
      },
      SetLastErrors: {
        name: 'SetLastErrors',
        handler: service.SetLastErrors,
        input: {
          protobuf: SetLastErrorsRequest,
          json: SetLastErrorsRequestJSON,
        },
        output: {
          protobuf: SetLastErrorsResponse,
          json: SetLastErrorsResponseJSON,
        },
      },
      GetDesiredState: {
        name: 'GetDesiredState',
        handler: service.GetDesiredState,
        input: {
          protobuf: GetDesiredStateRequest,
          json: GetDesiredStateRequestJSON,
        },
        output: {
          protobuf: GetDesiredStateResponse,
          json: GetDesiredStateResponseJSON,
        },
      },
    },
  } as const
}

//========================================//
//        Protobuf Encode / Decode        //
//========================================//

export const CloudState = {
  /**
   * Serializes CloudState to protobuf.
   */
  encode: function (msg: Partial<CloudState>): Uint8Array {
    return CloudState._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes CloudState from protobuf.
   */
  decode: function (bytes: ByteSource): CloudState {
    return CloudState._readMessage(CloudState.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes CloudState with all fields set to their default value.
   */
  initialize: function (): CloudState {
    return {
      aws: undefined,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<CloudState>, writer: BinaryWriter): BinaryWriter {
    if (msg.aws != undefined) {
      writer.writeMessage(1, msg.aws, CloudState.Aws._writeMessage)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: CloudState, reader: BinaryReader): CloudState {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.aws = CloudState.Aws.initialize()
          reader.readMessage(msg.aws, CloudState.Aws._readMessage)
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },

  Aws: {
    /**
     * Serializes CloudState.Aws to protobuf.
     */
    encode: function (msg: Partial<CloudState.Aws>): Uint8Array {
      return CloudState.Aws._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes CloudState.Aws from protobuf.
     */
    decode: function (bytes: ByteSource): CloudState.Aws {
      return CloudState.Aws._readMessage(CloudState.Aws.initialize(), new BinaryReader(bytes))
    },

    /**
     * Initializes CloudState.Aws with all fields set to their default value.
     */
    initialize: function (): CloudState.Aws {
      return {
        availabilityZone: '',
        state: '',
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<CloudState.Aws>, writer: BinaryWriter): BinaryWriter {
      if (msg.availabilityZone) {
        writer.writeString(1, msg.availabilityZone)
      }
      if (msg.state) {
        writer.writeString(2, msg.state)
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (msg: CloudState.Aws, reader: BinaryReader): CloudState.Aws {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.availabilityZone = reader.readString()
            break
          }
          case 2: {
            msg.state = reader.readString()
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },
}

export const CloudStatePatch = {
  /**
   * Serializes CloudStatePatch to protobuf.
   */
  encode: function (msg: Partial<CloudStatePatch>): Uint8Array {
    return CloudStatePatch._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes CloudStatePatch from protobuf.
   */
  decode: function (bytes: ByteSource): CloudStatePatch {
    return CloudStatePatch._readMessage(CloudStatePatch.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes CloudStatePatch with all fields set to their default value.
   */
  initialize: function (): CloudStatePatch {
    return {
      aws: undefined,
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<CloudStatePatch>, writer: BinaryWriter): BinaryWriter {
    if (msg.aws != undefined) {
      writer.writeMessage(1, msg.aws, CloudStatePatch.Aws._writeMessage)
    }
    if (msg.generation) {
      writer.writeInt32(10, msg.generation)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: CloudStatePatch, reader: BinaryReader): CloudStatePatch {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.aws = CloudStatePatch.Aws.initialize()
          reader.readMessage(msg.aws, CloudStatePatch.Aws._readMessage)
          break
        }
        case 10: {
          msg.generation = reader.readInt32()
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },

  Aws: {
    /**
     * Serializes CloudStatePatch.Aws to protobuf.
     */
    encode: function (msg: Partial<CloudStatePatch.Aws>): Uint8Array {
      return CloudStatePatch.Aws._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes CloudStatePatch.Aws from protobuf.
     */
    decode: function (bytes: ByteSource): CloudStatePatch.Aws {
      return CloudStatePatch.Aws._readMessage(CloudStatePatch.Aws.initialize(), new BinaryReader(bytes))
    },

    /**
     * Initializes CloudStatePatch.Aws with all fields set to their default value.
     */
    initialize: function (): CloudStatePatch.Aws {
      return {
        patch: '',
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<CloudStatePatch.Aws>, writer: BinaryWriter): BinaryWriter {
      if (msg.patch) {
        writer.writeString(1, msg.patch)
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (msg: CloudStatePatch.Aws, reader: BinaryReader): CloudStatePatch.Aws {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.patch = reader.readString()
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },
}

export const ReplaceCloudStateRequest = {
  /**
   * Serializes ReplaceCloudStateRequest to protobuf.
   */
  encode: function (msg: Partial<ReplaceCloudStateRequest>): Uint8Array {
    return ReplaceCloudStateRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes ReplaceCloudStateRequest from protobuf.
   */
  decode: function (bytes: ByteSource): ReplaceCloudStateRequest {
    return ReplaceCloudStateRequest._readMessage(ReplaceCloudStateRequest.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes ReplaceCloudStateRequest with all fields set to their default value.
   */
  initialize: function (): ReplaceCloudStateRequest {
    return {
      connectionId: '',
      state: CloudState.initialize(),
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<ReplaceCloudStateRequest>, writer: BinaryWriter): BinaryWriter {
    if (msg.connectionId) {
      writer.writeString(1, msg.connectionId)
    }
    if (msg.state) {
      writer.writeMessage(2, msg.state, CloudState._writeMessage)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReplaceCloudStateRequest, reader: BinaryReader): ReplaceCloudStateRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.connectionId = reader.readString()
          break
        }
        case 2: {
          reader.readMessage(msg.state, CloudState._readMessage)
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const ReplaceCloudStateResponse = {
  /**
   * Serializes ReplaceCloudStateResponse to protobuf.
   */
  encode: function (msg: Partial<ReplaceCloudStateResponse>): Uint8Array {
    return ReplaceCloudStateResponse._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes ReplaceCloudStateResponse from protobuf.
   */
  decode: function (bytes: ByteSource): ReplaceCloudStateResponse {
    return ReplaceCloudStateResponse._readMessage(ReplaceCloudStateResponse.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes ReplaceCloudStateResponse with all fields set to their default value.
   */
  initialize: function (): ReplaceCloudStateResponse {
    return {
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<ReplaceCloudStateResponse>, writer: BinaryWriter): BinaryWriter {
    if (msg.generation) {
      writer.writeInt32(1, msg.generation)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReplaceCloudStateResponse, reader: BinaryReader): ReplaceCloudStateResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.generation = reader.readInt32()
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const PatchCloudStateRequest = {
  /**
   * Serializes PatchCloudStateRequest to protobuf.
   */
  encode: function (msg: Partial<PatchCloudStateRequest>): Uint8Array {
    return PatchCloudStateRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes PatchCloudStateRequest from protobuf.
   */
  decode: function (bytes: ByteSource): PatchCloudStateRequest {
    return PatchCloudStateRequest._readMessage(PatchCloudStateRequest.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes PatchCloudStateRequest with all fields set to their default value.
   */
  initialize: function (): PatchCloudStateRequest {
    return {
      connectionId: '',
      patch: CloudStatePatch.initialize(),
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PatchCloudStateRequest>, writer: BinaryWriter): BinaryWriter {
    if (msg.connectionId) {
      writer.writeString(1, msg.connectionId)
    }
    if (msg.patch) {
      writer.writeMessage(2, msg.patch, CloudStatePatch._writeMessage)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: PatchCloudStateRequest, reader: BinaryReader): PatchCloudStateRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.connectionId = reader.readString()
          break
        }
        case 2: {
          reader.readMessage(msg.patch, CloudStatePatch._readMessage)
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const PatchCloudStateResponse = {
  /**
   * Serializes PatchCloudStateResponse to protobuf.
   */
  encode: function (msg: Partial<PatchCloudStateResponse>): Uint8Array {
    return PatchCloudStateResponse._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes PatchCloudStateResponse from protobuf.
   */
  decode: function (bytes: ByteSource): PatchCloudStateResponse {
    return PatchCloudStateResponse._readMessage(PatchCloudStateResponse.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes PatchCloudStateResponse with all fields set to their default value.
   */
  initialize: function (): PatchCloudStateResponse {
    return {
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PatchCloudStateResponse>, writer: BinaryWriter): BinaryWriter {
    if (msg.generation) {
      writer.writeInt32(1, msg.generation)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: PatchCloudStateResponse, reader: BinaryReader): PatchCloudStateResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.generation = reader.readInt32()
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const SetLastErrorsRequest = {
  /**
   * Serializes SetLastErrorsRequest to protobuf.
   */
  encode: function (msg: Partial<SetLastErrorsRequest>): Uint8Array {
    return SetLastErrorsRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes SetLastErrorsRequest from protobuf.
   */
  decode: function (bytes: ByteSource): SetLastErrorsRequest {
    return SetLastErrorsRequest._readMessage(SetLastErrorsRequest.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes SetLastErrorsRequest with all fields set to their default value.
   */
  initialize: function (): SetLastErrorsRequest {
    return {
      connectionId: '',
      errors: [],
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<SetLastErrorsRequest>, writer: BinaryWriter): BinaryWriter {
    if (msg.connectionId) {
      writer.writeString(1, msg.connectionId)
    }
    if (msg.errors?.length) {
      writer.writeRepeatedString(2, msg.errors)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: SetLastErrorsRequest, reader: BinaryReader): SetLastErrorsRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.connectionId = reader.readString()
          break
        }
        case 2: {
          msg.errors.push(reader.readString())
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const SetLastErrorsResponse = {
  /**
   * Serializes SetLastErrorsResponse to protobuf.
   */
  encode: function (_msg?: Partial<SetLastErrorsResponse>): Uint8Array {
    return new Uint8Array()
  },

  /**
   * Deserializes SetLastErrorsResponse from protobuf.
   */
  decode: function (_bytes?: ByteSource): SetLastErrorsResponse {
    return {}
  },

  /**
   * Initializes SetLastErrorsResponse with all fields set to their default value.
   */
  initialize: function (): SetLastErrorsResponse {
    return {}
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<SetLastErrorsResponse>, writer: BinaryWriter): BinaryWriter {
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (_msg: SetLastErrorsResponse, _reader: BinaryReader): SetLastErrorsResponse {
    return _msg
  },
}

export const GetDesiredStateRequest = {
  /**
   * Serializes GetDesiredStateRequest to protobuf.
   */
  encode: function (msg: Partial<GetDesiredStateRequest>): Uint8Array {
    return GetDesiredStateRequest._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes GetDesiredStateRequest from protobuf.
   */
  decode: function (bytes: ByteSource): GetDesiredStateRequest {
    return GetDesiredStateRequest._readMessage(GetDesiredStateRequest.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes GetDesiredStateRequest with all fields set to their default value.
   */
  initialize: function (): GetDesiredStateRequest {
    return {
      connectionId: '',
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GetDesiredStateRequest>, writer: BinaryWriter): BinaryWriter {
    if (msg.connectionId) {
      writer.writeString(1, msg.connectionId)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetDesiredStateRequest, reader: BinaryReader): GetDesiredStateRequest {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          msg.connectionId = reader.readString()
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },
}

export const GetDesiredStateResponse = {
  /**
   * Serializes GetDesiredStateResponse to protobuf.
   */
  encode: function (msg: Partial<GetDesiredStateResponse>): Uint8Array {
    return GetDesiredStateResponse._writeMessage(msg, new BinaryWriter()).getResultBuffer()
  },

  /**
   * Deserializes GetDesiredStateResponse from protobuf.
   */
  decode: function (bytes: ByteSource): GetDesiredStateResponse {
    return GetDesiredStateResponse._readMessage(GetDesiredStateResponse.initialize(), new BinaryReader(bytes))
  },

  /**
   * Initializes GetDesiredStateResponse with all fields set to their default value.
   */
  initialize: function (): GetDesiredStateResponse {
    return {
      newMachines: [],
      newVolumes: [],
      machineChanges: [],
      volumeChanges: [],
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GetDesiredStateResponse>, writer: BinaryWriter): BinaryWriter {
    if (msg.newMachines?.length) {
      writer.writeRepeatedMessage(1, msg.newMachines as any, GetDesiredStateResponse.NewMachine._writeMessage)
    }
    if (msg.newVolumes?.length) {
      writer.writeRepeatedMessage(2, msg.newVolumes as any, GetDesiredStateResponse.NewVolume._writeMessage)
    }
    if (msg.machineChanges?.length) {
      writer.writeRepeatedMessage(3, msg.machineChanges as any, GetDesiredStateResponse.MachineChange._writeMessage)
    }
    if (msg.volumeChanges?.length) {
      writer.writeRepeatedMessage(4, msg.volumeChanges as any, GetDesiredStateResponse.VolumeChange._writeMessage)
    }
    return writer
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetDesiredStateResponse, reader: BinaryReader): GetDesiredStateResponse {
    while (reader.nextField()) {
      const field = reader.getFieldNumber()
      switch (field) {
        case 1: {
          const m = GetDesiredStateResponse.NewMachine.initialize()
          reader.readMessage(m, GetDesiredStateResponse.NewMachine._readMessage)
          msg.newMachines.push(m)
          break
        }
        case 2: {
          const m = GetDesiredStateResponse.NewVolume.initialize()
          reader.readMessage(m, GetDesiredStateResponse.NewVolume._readMessage)
          msg.newVolumes.push(m)
          break
        }
        case 3: {
          const m = GetDesiredStateResponse.MachineChange.initialize()
          reader.readMessage(m, GetDesiredStateResponse.MachineChange._readMessage)
          msg.machineChanges.push(m)
          break
        }
        case 4: {
          const m = GetDesiredStateResponse.VolumeChange.initialize()
          reader.readMessage(m, GetDesiredStateResponse.VolumeChange._readMessage)
          msg.volumeChanges.push(m)
          break
        }
        default: {
          reader.skipField()
          break
        }
      }
    }
    return msg
  },

  Architecture: {
    ARCHITECTURE_UNSPECIFIED: 'ARCHITECTURE_UNSPECIFIED',
    ARCHITECTURE_X86: 'ARCHITECTURE_X86',
    ARCHITECTURE_ARM: 'ARCHITECTURE_ARM',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.Architecture {
      switch (i) {
        case 0: {
          return 'ARCHITECTURE_UNSPECIFIED'
        }
        case 1: {
          return 'ARCHITECTURE_X86'
        }
        case 2: {
          return 'ARCHITECTURE_ARM'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.Architecture
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.Architecture): number {
      switch (i) {
        case 'ARCHITECTURE_UNSPECIFIED': {
          return 0
        }
        case 'ARCHITECTURE_X86': {
          return 1
        }
        case 'ARCHITECTURE_ARM': {
          return 2
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  Kind: {
    KIND_UNSPECIFIED: 'KIND_UNSPECIFIED',
    KIND_BUILDKIT: 'KIND_BUILDKIT',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.Kind {
      switch (i) {
        case 0: {
          return 'KIND_UNSPECIFIED'
        }
        case 1: {
          return 'KIND_BUILDKIT'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.Kind
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.Kind): number {
      switch (i) {
        case 'KIND_UNSPECIFIED': {
          return 0
        }
        case 'KIND_BUILDKIT': {
          return 1
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  MachineState: {
    MACHINE_STATE_UNSPECIFIED: 'MACHINE_STATE_UNSPECIFIED',
    MACHINE_STATE_PENDING: 'MACHINE_STATE_PENDING',
    MACHINE_STATE_RUNNING: 'MACHINE_STATE_RUNNING',
    MACHINE_STATE_STOPPING: 'MACHINE_STATE_STOPPING',
    MACHINE_STATE_STOPPED: 'MACHINE_STATE_STOPPED',
    MACHINE_STATE_DELETING: 'MACHINE_STATE_DELETING',
    MACHINE_STATE_DELETED: 'MACHINE_STATE_DELETED',
    MACHINE_STATE_ERROR: 'MACHINE_STATE_ERROR',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.MachineState {
      switch (i) {
        case 0: {
          return 'MACHINE_STATE_UNSPECIFIED'
        }
        case 1: {
          return 'MACHINE_STATE_PENDING'
        }
        case 2: {
          return 'MACHINE_STATE_RUNNING'
        }
        case 3: {
          return 'MACHINE_STATE_STOPPING'
        }
        case 4: {
          return 'MACHINE_STATE_STOPPED'
        }
        case 5: {
          return 'MACHINE_STATE_DELETING'
        }
        case 6: {
          return 'MACHINE_STATE_DELETED'
        }
        case 7: {
          return 'MACHINE_STATE_ERROR'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.MachineState
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.MachineState): number {
      switch (i) {
        case 'MACHINE_STATE_UNSPECIFIED': {
          return 0
        }
        case 'MACHINE_STATE_PENDING': {
          return 1
        }
        case 'MACHINE_STATE_RUNNING': {
          return 2
        }
        case 'MACHINE_STATE_STOPPING': {
          return 3
        }
        case 'MACHINE_STATE_STOPPED': {
          return 4
        }
        case 'MACHINE_STATE_DELETING': {
          return 5
        }
        case 'MACHINE_STATE_DELETED': {
          return 6
        }
        case 'MACHINE_STATE_ERROR': {
          return 7
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  SecurityGroup: {
    SECURITY_GROUP_UNSPECIFIED: 'SECURITY_GROUP_UNSPECIFIED',
    SECURITY_GROUP_DEFAULT: 'SECURITY_GROUP_DEFAULT',
    SECURITY_GROUP_BUILDKIT: 'SECURITY_GROUP_BUILDKIT',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.SecurityGroup {
      switch (i) {
        case 0: {
          return 'SECURITY_GROUP_UNSPECIFIED'
        }
        case 1: {
          return 'SECURITY_GROUP_DEFAULT'
        }
        case 2: {
          return 'SECURITY_GROUP_BUILDKIT'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.SecurityGroup
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.SecurityGroup): number {
      switch (i) {
        case 'SECURITY_GROUP_UNSPECIFIED': {
          return 0
        }
        case 'SECURITY_GROUP_DEFAULT': {
          return 1
        }
        case 'SECURITY_GROUP_BUILDKIT': {
          return 2
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  VolumeState: {
    VOLUME_STATE_UNSPECIFIED: 'VOLUME_STATE_UNSPECIFIED',
    VOLUME_STATE_PENDING: 'VOLUME_STATE_PENDING',
    VOLUME_STATE_AVAILABLE: 'VOLUME_STATE_AVAILABLE',
    VOLUME_STATE_ATTACHED: 'VOLUME_STATE_ATTACHED',
    VOLUME_STATE_DELETED: 'VOLUME_STATE_DELETED',
    VOLUME_STATE_ERROR: 'VOLUME_STATE_ERROR',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.VolumeState {
      switch (i) {
        case 0: {
          return 'VOLUME_STATE_UNSPECIFIED'
        }
        case 1: {
          return 'VOLUME_STATE_PENDING'
        }
        case 2: {
          return 'VOLUME_STATE_AVAILABLE'
        }
        case 3: {
          return 'VOLUME_STATE_ATTACHED'
        }
        case 4: {
          return 'VOLUME_STATE_DELETED'
        }
        case 5: {
          return 'VOLUME_STATE_ERROR'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.VolumeState
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.VolumeState): number {
      switch (i) {
        case 'VOLUME_STATE_UNSPECIFIED': {
          return 0
        }
        case 'VOLUME_STATE_PENDING': {
          return 1
        }
        case 'VOLUME_STATE_AVAILABLE': {
          return 2
        }
        case 'VOLUME_STATE_ATTACHED': {
          return 3
        }
        case 'VOLUME_STATE_DELETED': {
          return 4
        }
        case 'VOLUME_STATE_ERROR': {
          return 5
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  NewMachine: {
    /**
     * Serializes GetDesiredStateResponse.NewMachine to protobuf.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.NewMachine>): Uint8Array {
      return GetDesiredStateResponse.NewMachine._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes GetDesiredStateResponse.NewMachine from protobuf.
     */
    decode: function (bytes: ByteSource): GetDesiredStateResponse.NewMachine {
      return GetDesiredStateResponse.NewMachine._readMessage(
        GetDesiredStateResponse.NewMachine.initialize(),
        new BinaryReader(bytes),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.NewMachine with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.NewMachine {
      return {
        id: '',
        realm: '',
        kind: GetDesiredStateResponse.Kind._fromInt(0),
        architecture: GetDesiredStateResponse.Architecture._fromInt(0),
        image: '',
        securityGroup: GetDesiredStateResponse.SecurityGroup._fromInt(0),
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.NewMachine>, writer: BinaryWriter): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id)
      }
      if (msg.realm) {
        writer.writeString(2, msg.realm)
      }
      if (msg.kind && GetDesiredStateResponse.Kind._toInt(msg.kind)) {
        writer.writeEnum(3, GetDesiredStateResponse.Kind._toInt(msg.kind))
      }
      if (msg.architecture && GetDesiredStateResponse.Architecture._toInt(msg.architecture)) {
        writer.writeEnum(4, GetDesiredStateResponse.Architecture._toInt(msg.architecture))
      }
      if (msg.image) {
        writer.writeString(5, msg.image)
      }
      if (msg.securityGroup && GetDesiredStateResponse.SecurityGroup._toInt(msg.securityGroup)) {
        writer.writeEnum(6, GetDesiredStateResponse.SecurityGroup._toInt(msg.securityGroup))
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.NewMachine,
      reader: BinaryReader,
    ): GetDesiredStateResponse.NewMachine {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.id = reader.readString()
            break
          }
          case 2: {
            msg.realm = reader.readString()
            break
          }
          case 3: {
            msg.kind = GetDesiredStateResponse.Kind._fromInt(reader.readEnum())
            break
          }
          case 4: {
            msg.architecture = GetDesiredStateResponse.Architecture._fromInt(reader.readEnum())
            break
          }
          case 5: {
            msg.image = reader.readString()
            break
          }
          case 6: {
            msg.securityGroup = GetDesiredStateResponse.SecurityGroup._fromInt(reader.readEnum())
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },

  NewVolume: {
    /**
     * Serializes GetDesiredStateResponse.NewVolume to protobuf.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.NewVolume>): Uint8Array {
      return GetDesiredStateResponse.NewVolume._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes GetDesiredStateResponse.NewVolume from protobuf.
     */
    decode: function (bytes: ByteSource): GetDesiredStateResponse.NewVolume {
      return GetDesiredStateResponse.NewVolume._readMessage(
        GetDesiredStateResponse.NewVolume.initialize(),
        new BinaryReader(bytes),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.NewVolume with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.NewVolume {
      return {
        id: '',
        realm: '',
        kind: GetDesiredStateResponse.Kind._fromInt(0),
        architecture: GetDesiredStateResponse.Architecture._fromInt(0),
        size: 0,
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.NewVolume>, writer: BinaryWriter): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id)
      }
      if (msg.realm) {
        writer.writeString(2, msg.realm)
      }
      if (msg.kind && GetDesiredStateResponse.Kind._toInt(msg.kind)) {
        writer.writeEnum(3, GetDesiredStateResponse.Kind._toInt(msg.kind))
      }
      if (msg.architecture && GetDesiredStateResponse.Architecture._toInt(msg.architecture)) {
        writer.writeEnum(4, GetDesiredStateResponse.Architecture._toInt(msg.architecture))
      }
      if (msg.size) {
        writer.writeInt32(5, msg.size)
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.NewVolume,
      reader: BinaryReader,
    ): GetDesiredStateResponse.NewVolume {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.id = reader.readString()
            break
          }
          case 2: {
            msg.realm = reader.readString()
            break
          }
          case 3: {
            msg.kind = GetDesiredStateResponse.Kind._fromInt(reader.readEnum())
            break
          }
          case 4: {
            msg.architecture = GetDesiredStateResponse.Architecture._fromInt(reader.readEnum())
            break
          }
          case 5: {
            msg.size = reader.readInt32()
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },

  MachineChange: {
    /**
     * Serializes GetDesiredStateResponse.MachineChange to protobuf.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.MachineChange>): Uint8Array {
      return GetDesiredStateResponse.MachineChange._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes GetDesiredStateResponse.MachineChange from protobuf.
     */
    decode: function (bytes: ByteSource): GetDesiredStateResponse.MachineChange {
      return GetDesiredStateResponse.MachineChange._readMessage(
        GetDesiredStateResponse.MachineChange.initialize(),
        new BinaryReader(bytes),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.MachineChange with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.MachineChange {
      return {
        id: '',
        desiredState: GetDesiredStateResponse.MachineState._fromInt(0),
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.MachineChange>, writer: BinaryWriter): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id)
      }
      if (msg.desiredState && GetDesiredStateResponse.MachineState._toInt(msg.desiredState)) {
        writer.writeEnum(2, GetDesiredStateResponse.MachineState._toInt(msg.desiredState))
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.MachineChange,
      reader: BinaryReader,
    ): GetDesiredStateResponse.MachineChange {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.id = reader.readString()
            break
          }
          case 2: {
            msg.desiredState = GetDesiredStateResponse.MachineState._fromInt(reader.readEnum())
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },

  VolumeChange: {
    /**
     * Serializes GetDesiredStateResponse.VolumeChange to protobuf.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.VolumeChange>): Uint8Array {
      return GetDesiredStateResponse.VolumeChange._writeMessage(msg, new BinaryWriter()).getResultBuffer()
    },

    /**
     * Deserializes GetDesiredStateResponse.VolumeChange from protobuf.
     */
    decode: function (bytes: ByteSource): GetDesiredStateResponse.VolumeChange {
      return GetDesiredStateResponse.VolumeChange._readMessage(
        GetDesiredStateResponse.VolumeChange.initialize(),
        new BinaryReader(bytes),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.VolumeChange with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.VolumeChange {
      return {
        id: '',
        desiredState: GetDesiredStateResponse.VolumeState._fromInt(0),
        attachedTo: undefined,
        device: undefined,
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.VolumeChange>, writer: BinaryWriter): BinaryWriter {
      if (msg.id) {
        writer.writeString(1, msg.id)
      }
      if (msg.desiredState && GetDesiredStateResponse.VolumeState._toInt(msg.desiredState)) {
        writer.writeEnum(2, GetDesiredStateResponse.VolumeState._toInt(msg.desiredState))
      }
      if (msg.attachedTo != undefined) {
        writer.writeString(3, msg.attachedTo)
      }
      if (msg.device != undefined) {
        writer.writeString(4, msg.device)
      }
      return writer
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.VolumeChange,
      reader: BinaryReader,
    ): GetDesiredStateResponse.VolumeChange {
      while (reader.nextField()) {
        const field = reader.getFieldNumber()
        switch (field) {
          case 1: {
            msg.id = reader.readString()
            break
          }
          case 2: {
            msg.desiredState = GetDesiredStateResponse.VolumeState._fromInt(reader.readEnum())
            break
          }
          case 3: {
            msg.attachedTo = reader.readString()
            break
          }
          case 4: {
            msg.device = reader.readString()
            break
          }
          default: {
            reader.skipField()
            break
          }
        }
      }
      return msg
    },
  },
}

//========================================//
//          JSON Encode / Decode          //
//========================================//

export const CloudStateJSON = {
  /**
   * Serializes CloudState to JSON.
   */
  encode: function (msg: Partial<CloudState>): string {
    return JSON.stringify(CloudStateJSON._writeMessage(msg))
  },

  /**
   * Deserializes CloudState from JSON.
   */
  decode: function (json: string): CloudState {
    return CloudStateJSON._readMessage(CloudStateJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes CloudState with all fields set to their default value.
   */
  initialize: function (): CloudState {
    return {
      aws: undefined,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<CloudState>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.aws != undefined) {
      const aws = CloudStateJSON.Aws._writeMessage(msg.aws)
      json['aws'] = aws
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: CloudState, json: any): CloudState {
    const _aws = json['aws']
    if (_aws) {
      const m = CloudState.Aws.initialize()
      CloudStateJSON.Aws._readMessage(m, _aws)
      msg.aws = m
    }
    return msg
  },

  Aws: {
    /**
     * Serializes CloudState.Aws to JSON.
     */
    encode: function (msg: Partial<CloudState.Aws>): string {
      return JSON.stringify(CloudStateJSON.Aws._writeMessage(msg))
    },

    /**
     * Deserializes CloudState.Aws from JSON.
     */
    decode: function (json: string): CloudState.Aws {
      return CloudStateJSON.Aws._readMessage(CloudStateJSON.Aws.initialize(), JSON.parse(json))
    },

    /**
     * Initializes CloudState.Aws with all fields set to their default value.
     */
    initialize: function (): CloudState.Aws {
      return {
        availabilityZone: '',
        state: '',
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<CloudState.Aws>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.availabilityZone) {
        json['availabilityZone'] = msg.availabilityZone
      }
      if (msg.state) {
        json['state'] = msg.state
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (msg: CloudState.Aws, json: any): CloudState.Aws {
      const _availabilityZone = json['availabilityZone'] ?? json['availability_zone']
      if (_availabilityZone) {
        msg.availabilityZone = _availabilityZone
      }
      const _state = json['state']
      if (_state) {
        msg.state = _state
      }
      return msg
    },
  },
}

export const CloudStatePatchJSON = {
  /**
   * Serializes CloudStatePatch to JSON.
   */
  encode: function (msg: Partial<CloudStatePatch>): string {
    return JSON.stringify(CloudStatePatchJSON._writeMessage(msg))
  },

  /**
   * Deserializes CloudStatePatch from JSON.
   */
  decode: function (json: string): CloudStatePatch {
    return CloudStatePatchJSON._readMessage(CloudStatePatchJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes CloudStatePatch with all fields set to their default value.
   */
  initialize: function (): CloudStatePatch {
    return {
      aws: undefined,
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<CloudStatePatch>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.aws != undefined) {
      const aws = CloudStatePatchJSON.Aws._writeMessage(msg.aws)
      json['aws'] = aws
    }
    if (msg.generation) {
      json['generation'] = msg.generation
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: CloudStatePatch, json: any): CloudStatePatch {
    const _aws = json['aws']
    if (_aws) {
      const m = CloudStatePatch.Aws.initialize()
      CloudStatePatchJSON.Aws._readMessage(m, _aws)
      msg.aws = m
    }
    const _generation = json['generation']
    if (_generation) {
      msg.generation = _generation
    }
    return msg
  },

  Aws: {
    /**
     * Serializes CloudStatePatch.Aws to JSON.
     */
    encode: function (msg: Partial<CloudStatePatch.Aws>): string {
      return JSON.stringify(CloudStatePatchJSON.Aws._writeMessage(msg))
    },

    /**
     * Deserializes CloudStatePatch.Aws from JSON.
     */
    decode: function (json: string): CloudStatePatch.Aws {
      return CloudStatePatchJSON.Aws._readMessage(CloudStatePatchJSON.Aws.initialize(), JSON.parse(json))
    },

    /**
     * Initializes CloudStatePatch.Aws with all fields set to their default value.
     */
    initialize: function (): CloudStatePatch.Aws {
      return {
        patch: '',
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<CloudStatePatch.Aws>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.patch) {
        json['patch'] = msg.patch
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (msg: CloudStatePatch.Aws, json: any): CloudStatePatch.Aws {
      const _patch = json['patch']
      if (_patch) {
        msg.patch = _patch
      }
      return msg
    },
  },
}

export const ReplaceCloudStateRequestJSON = {
  /**
   * Serializes ReplaceCloudStateRequest to JSON.
   */
  encode: function (msg: Partial<ReplaceCloudStateRequest>): string {
    return JSON.stringify(ReplaceCloudStateRequestJSON._writeMessage(msg))
  },

  /**
   * Deserializes ReplaceCloudStateRequest from JSON.
   */
  decode: function (json: string): ReplaceCloudStateRequest {
    return ReplaceCloudStateRequestJSON._readMessage(ReplaceCloudStateRequestJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes ReplaceCloudStateRequest with all fields set to their default value.
   */
  initialize: function (): ReplaceCloudStateRequest {
    return {
      connectionId: '',
      state: CloudState.initialize(),
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<ReplaceCloudStateRequest>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.connectionId) {
      json['connectionId'] = msg.connectionId
    }
    if (msg.state) {
      const state = CloudStateJSON._writeMessage(msg.state)
      if (Object.keys(state).length > 0) {
        json['state'] = state
      }
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReplaceCloudStateRequest, json: any): ReplaceCloudStateRequest {
    const _connectionId = json['connectionId'] ?? json['connection_id']
    if (_connectionId) {
      msg.connectionId = _connectionId
    }
    const _state = json['state']
    if (_state) {
      const m = CloudState.initialize()
      CloudStateJSON._readMessage(m, _state)
      msg.state = m
    }
    return msg
  },
}

export const ReplaceCloudStateResponseJSON = {
  /**
   * Serializes ReplaceCloudStateResponse to JSON.
   */
  encode: function (msg: Partial<ReplaceCloudStateResponse>): string {
    return JSON.stringify(ReplaceCloudStateResponseJSON._writeMessage(msg))
  },

  /**
   * Deserializes ReplaceCloudStateResponse from JSON.
   */
  decode: function (json: string): ReplaceCloudStateResponse {
    return ReplaceCloudStateResponseJSON._readMessage(ReplaceCloudStateResponseJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes ReplaceCloudStateResponse with all fields set to their default value.
   */
  initialize: function (): ReplaceCloudStateResponse {
    return {
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<ReplaceCloudStateResponse>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.generation) {
      json['generation'] = msg.generation
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: ReplaceCloudStateResponse, json: any): ReplaceCloudStateResponse {
    const _generation = json['generation']
    if (_generation) {
      msg.generation = _generation
    }
    return msg
  },
}

export const PatchCloudStateRequestJSON = {
  /**
   * Serializes PatchCloudStateRequest to JSON.
   */
  encode: function (msg: Partial<PatchCloudStateRequest>): string {
    return JSON.stringify(PatchCloudStateRequestJSON._writeMessage(msg))
  },

  /**
   * Deserializes PatchCloudStateRequest from JSON.
   */
  decode: function (json: string): PatchCloudStateRequest {
    return PatchCloudStateRequestJSON._readMessage(PatchCloudStateRequestJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes PatchCloudStateRequest with all fields set to their default value.
   */
  initialize: function (): PatchCloudStateRequest {
    return {
      connectionId: '',
      patch: CloudStatePatch.initialize(),
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PatchCloudStateRequest>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.connectionId) {
      json['connectionId'] = msg.connectionId
    }
    if (msg.patch) {
      const patch = CloudStatePatchJSON._writeMessage(msg.patch)
      if (Object.keys(patch).length > 0) {
        json['patch'] = patch
      }
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: PatchCloudStateRequest, json: any): PatchCloudStateRequest {
    const _connectionId = json['connectionId'] ?? json['connection_id']
    if (_connectionId) {
      msg.connectionId = _connectionId
    }
    const _patch = json['patch']
    if (_patch) {
      const m = CloudStatePatch.initialize()
      CloudStatePatchJSON._readMessage(m, _patch)
      msg.patch = m
    }
    return msg
  },
}

export const PatchCloudStateResponseJSON = {
  /**
   * Serializes PatchCloudStateResponse to JSON.
   */
  encode: function (msg: Partial<PatchCloudStateResponse>): string {
    return JSON.stringify(PatchCloudStateResponseJSON._writeMessage(msg))
  },

  /**
   * Deserializes PatchCloudStateResponse from JSON.
   */
  decode: function (json: string): PatchCloudStateResponse {
    return PatchCloudStateResponseJSON._readMessage(PatchCloudStateResponseJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes PatchCloudStateResponse with all fields set to their default value.
   */
  initialize: function (): PatchCloudStateResponse {
    return {
      generation: 0,
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<PatchCloudStateResponse>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.generation) {
      json['generation'] = msg.generation
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: PatchCloudStateResponse, json: any): PatchCloudStateResponse {
    const _generation = json['generation']
    if (_generation) {
      msg.generation = _generation
    }
    return msg
  },
}

export const SetLastErrorsRequestJSON = {
  /**
   * Serializes SetLastErrorsRequest to JSON.
   */
  encode: function (msg: Partial<SetLastErrorsRequest>): string {
    return JSON.stringify(SetLastErrorsRequestJSON._writeMessage(msg))
  },

  /**
   * Deserializes SetLastErrorsRequest from JSON.
   */
  decode: function (json: string): SetLastErrorsRequest {
    return SetLastErrorsRequestJSON._readMessage(SetLastErrorsRequestJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes SetLastErrorsRequest with all fields set to their default value.
   */
  initialize: function (): SetLastErrorsRequest {
    return {
      connectionId: '',
      errors: [],
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<SetLastErrorsRequest>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.connectionId) {
      json['connectionId'] = msg.connectionId
    }
    if (msg.errors?.length) {
      json['errors'] = msg.errors
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: SetLastErrorsRequest, json: any): SetLastErrorsRequest {
    const _connectionId = json['connectionId'] ?? json['connection_id']
    if (_connectionId) {
      msg.connectionId = _connectionId
    }
    const _errors = json['errors']
    if (_errors) {
      msg.errors = _errors
    }
    return msg
  },
}

export const SetLastErrorsResponseJSON = {
  /**
   * Serializes SetLastErrorsResponse to JSON.
   */
  encode: function (_msg?: Partial<SetLastErrorsResponse>): string {
    return '{}'
  },

  /**
   * Deserializes SetLastErrorsResponse from JSON.
   */
  decode: function (_json?: string): SetLastErrorsResponse {
    return {}
  },

  /**
   * Initializes SetLastErrorsResponse with all fields set to their default value.
   */
  initialize: function (): SetLastErrorsResponse {
    return {}
  },

  /**
   * @private
   */
  _writeMessage: function (_msg: Partial<SetLastErrorsResponse>): Record<string, unknown> {
    return {}
  },

  /**
   * @private
   */
  _readMessage: function (msg: SetLastErrorsResponse, _json: any): SetLastErrorsResponse {
    return msg
  },
}

export const GetDesiredStateRequestJSON = {
  /**
   * Serializes GetDesiredStateRequest to JSON.
   */
  encode: function (msg: Partial<GetDesiredStateRequest>): string {
    return JSON.stringify(GetDesiredStateRequestJSON._writeMessage(msg))
  },

  /**
   * Deserializes GetDesiredStateRequest from JSON.
   */
  decode: function (json: string): GetDesiredStateRequest {
    return GetDesiredStateRequestJSON._readMessage(GetDesiredStateRequestJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes GetDesiredStateRequest with all fields set to their default value.
   */
  initialize: function (): GetDesiredStateRequest {
    return {
      connectionId: '',
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GetDesiredStateRequest>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.connectionId) {
      json['connectionId'] = msg.connectionId
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetDesiredStateRequest, json: any): GetDesiredStateRequest {
    const _connectionId = json['connectionId'] ?? json['connection_id']
    if (_connectionId) {
      msg.connectionId = _connectionId
    }
    return msg
  },
}

export const GetDesiredStateResponseJSON = {
  /**
   * Serializes GetDesiredStateResponse to JSON.
   */
  encode: function (msg: Partial<GetDesiredStateResponse>): string {
    return JSON.stringify(GetDesiredStateResponseJSON._writeMessage(msg))
  },

  /**
   * Deserializes GetDesiredStateResponse from JSON.
   */
  decode: function (json: string): GetDesiredStateResponse {
    return GetDesiredStateResponseJSON._readMessage(GetDesiredStateResponseJSON.initialize(), JSON.parse(json))
  },

  /**
   * Initializes GetDesiredStateResponse with all fields set to their default value.
   */
  initialize: function (): GetDesiredStateResponse {
    return {
      newMachines: [],
      newVolumes: [],
      machineChanges: [],
      volumeChanges: [],
    }
  },

  /**
   * @private
   */
  _writeMessage: function (msg: Partial<GetDesiredStateResponse>): Record<string, unknown> {
    const json: Record<string, unknown> = {}
    if (msg.newMachines?.length) {
      json['newMachines'] = msg.newMachines.map(GetDesiredStateResponseJSON.NewMachine._writeMessage)
    }
    if (msg.newVolumes?.length) {
      json['newVolumes'] = msg.newVolumes.map(GetDesiredStateResponseJSON.NewVolume._writeMessage)
    }
    if (msg.machineChanges?.length) {
      json['machineChanges'] = msg.machineChanges.map(GetDesiredStateResponseJSON.MachineChange._writeMessage)
    }
    if (msg.volumeChanges?.length) {
      json['volumeChanges'] = msg.volumeChanges.map(GetDesiredStateResponseJSON.VolumeChange._writeMessage)
    }
    return json
  },

  /**
   * @private
   */
  _readMessage: function (msg: GetDesiredStateResponse, json: any): GetDesiredStateResponse {
    const _newMachines = json['newMachines'] ?? json['new_machines']
    if (_newMachines) {
      for (const item of _newMachines) {
        const m = GetDesiredStateResponse.NewMachine.initialize()
        GetDesiredStateResponseJSON.NewMachine._readMessage(m, item)
        msg.newMachines.push(m)
      }
    }
    const _newVolumes = json['newVolumes'] ?? json['new_volumes']
    if (_newVolumes) {
      for (const item of _newVolumes) {
        const m = GetDesiredStateResponse.NewVolume.initialize()
        GetDesiredStateResponseJSON.NewVolume._readMessage(m, item)
        msg.newVolumes.push(m)
      }
    }
    const _machineChanges = json['machineChanges'] ?? json['machine_changes']
    if (_machineChanges) {
      for (const item of _machineChanges) {
        const m = GetDesiredStateResponse.MachineChange.initialize()
        GetDesiredStateResponseJSON.MachineChange._readMessage(m, item)
        msg.machineChanges.push(m)
      }
    }
    const _volumeChanges = json['volumeChanges'] ?? json['volume_changes']
    if (_volumeChanges) {
      for (const item of _volumeChanges) {
        const m = GetDesiredStateResponse.VolumeChange.initialize()
        GetDesiredStateResponseJSON.VolumeChange._readMessage(m, item)
        msg.volumeChanges.push(m)
      }
    }
    return msg
  },

  Architecture: {
    ARCHITECTURE_UNSPECIFIED: 'ARCHITECTURE_UNSPECIFIED',
    ARCHITECTURE_X86: 'ARCHITECTURE_X86',
    ARCHITECTURE_ARM: 'ARCHITECTURE_ARM',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.Architecture {
      switch (i) {
        case 0: {
          return 'ARCHITECTURE_UNSPECIFIED'
        }
        case 1: {
          return 'ARCHITECTURE_X86'
        }
        case 2: {
          return 'ARCHITECTURE_ARM'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.Architecture
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.Architecture): number {
      switch (i) {
        case 'ARCHITECTURE_UNSPECIFIED': {
          return 0
        }
        case 'ARCHITECTURE_X86': {
          return 1
        }
        case 'ARCHITECTURE_ARM': {
          return 2
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  Kind: {
    KIND_UNSPECIFIED: 'KIND_UNSPECIFIED',
    KIND_BUILDKIT: 'KIND_BUILDKIT',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.Kind {
      switch (i) {
        case 0: {
          return 'KIND_UNSPECIFIED'
        }
        case 1: {
          return 'KIND_BUILDKIT'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.Kind
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.Kind): number {
      switch (i) {
        case 'KIND_UNSPECIFIED': {
          return 0
        }
        case 'KIND_BUILDKIT': {
          return 1
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  MachineState: {
    MACHINE_STATE_UNSPECIFIED: 'MACHINE_STATE_UNSPECIFIED',
    MACHINE_STATE_PENDING: 'MACHINE_STATE_PENDING',
    MACHINE_STATE_RUNNING: 'MACHINE_STATE_RUNNING',
    MACHINE_STATE_STOPPING: 'MACHINE_STATE_STOPPING',
    MACHINE_STATE_STOPPED: 'MACHINE_STATE_STOPPED',
    MACHINE_STATE_DELETING: 'MACHINE_STATE_DELETING',
    MACHINE_STATE_DELETED: 'MACHINE_STATE_DELETED',
    MACHINE_STATE_ERROR: 'MACHINE_STATE_ERROR',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.MachineState {
      switch (i) {
        case 0: {
          return 'MACHINE_STATE_UNSPECIFIED'
        }
        case 1: {
          return 'MACHINE_STATE_PENDING'
        }
        case 2: {
          return 'MACHINE_STATE_RUNNING'
        }
        case 3: {
          return 'MACHINE_STATE_STOPPING'
        }
        case 4: {
          return 'MACHINE_STATE_STOPPED'
        }
        case 5: {
          return 'MACHINE_STATE_DELETING'
        }
        case 6: {
          return 'MACHINE_STATE_DELETED'
        }
        case 7: {
          return 'MACHINE_STATE_ERROR'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.MachineState
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.MachineState): number {
      switch (i) {
        case 'MACHINE_STATE_UNSPECIFIED': {
          return 0
        }
        case 'MACHINE_STATE_PENDING': {
          return 1
        }
        case 'MACHINE_STATE_RUNNING': {
          return 2
        }
        case 'MACHINE_STATE_STOPPING': {
          return 3
        }
        case 'MACHINE_STATE_STOPPED': {
          return 4
        }
        case 'MACHINE_STATE_DELETING': {
          return 5
        }
        case 'MACHINE_STATE_DELETED': {
          return 6
        }
        case 'MACHINE_STATE_ERROR': {
          return 7
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  SecurityGroup: {
    SECURITY_GROUP_UNSPECIFIED: 'SECURITY_GROUP_UNSPECIFIED',
    SECURITY_GROUP_DEFAULT: 'SECURITY_GROUP_DEFAULT',
    SECURITY_GROUP_BUILDKIT: 'SECURITY_GROUP_BUILDKIT',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.SecurityGroup {
      switch (i) {
        case 0: {
          return 'SECURITY_GROUP_UNSPECIFIED'
        }
        case 1: {
          return 'SECURITY_GROUP_DEFAULT'
        }
        case 2: {
          return 'SECURITY_GROUP_BUILDKIT'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.SecurityGroup
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.SecurityGroup): number {
      switch (i) {
        case 'SECURITY_GROUP_UNSPECIFIED': {
          return 0
        }
        case 'SECURITY_GROUP_DEFAULT': {
          return 1
        }
        case 'SECURITY_GROUP_BUILDKIT': {
          return 2
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  VolumeState: {
    VOLUME_STATE_UNSPECIFIED: 'VOLUME_STATE_UNSPECIFIED',
    VOLUME_STATE_PENDING: 'VOLUME_STATE_PENDING',
    VOLUME_STATE_AVAILABLE: 'VOLUME_STATE_AVAILABLE',
    VOLUME_STATE_ATTACHED: 'VOLUME_STATE_ATTACHED',
    VOLUME_STATE_DELETED: 'VOLUME_STATE_DELETED',
    VOLUME_STATE_ERROR: 'VOLUME_STATE_ERROR',
    /**
     * @private
     */
    _fromInt: function (i: number): GetDesiredStateResponse.VolumeState {
      switch (i) {
        case 0: {
          return 'VOLUME_STATE_UNSPECIFIED'
        }
        case 1: {
          return 'VOLUME_STATE_PENDING'
        }
        case 2: {
          return 'VOLUME_STATE_AVAILABLE'
        }
        case 3: {
          return 'VOLUME_STATE_ATTACHED'
        }
        case 4: {
          return 'VOLUME_STATE_DELETED'
        }
        case 5: {
          return 'VOLUME_STATE_ERROR'
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as GetDesiredStateResponse.VolumeState
        }
      }
    },
    /**
     * @private
     */
    _toInt: function (i: GetDesiredStateResponse.VolumeState): number {
      switch (i) {
        case 'VOLUME_STATE_UNSPECIFIED': {
          return 0
        }
        case 'VOLUME_STATE_PENDING': {
          return 1
        }
        case 'VOLUME_STATE_AVAILABLE': {
          return 2
        }
        case 'VOLUME_STATE_ATTACHED': {
          return 3
        }
        case 'VOLUME_STATE_DELETED': {
          return 4
        }
        case 'VOLUME_STATE_ERROR': {
          return 5
        }
        // unknown values are preserved as numbers. this occurs when new enum values are introduced and the generated code is out of date.
        default: {
          return i as unknown as number
        }
      }
    },
  } as const,

  NewMachine: {
    /**
     * Serializes GetDesiredStateResponse.NewMachine to JSON.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.NewMachine>): string {
      return JSON.stringify(GetDesiredStateResponseJSON.NewMachine._writeMessage(msg))
    },

    /**
     * Deserializes GetDesiredStateResponse.NewMachine from JSON.
     */
    decode: function (json: string): GetDesiredStateResponse.NewMachine {
      return GetDesiredStateResponseJSON.NewMachine._readMessage(
        GetDesiredStateResponseJSON.NewMachine.initialize(),
        JSON.parse(json),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.NewMachine with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.NewMachine {
      return {
        id: '',
        realm: '',
        kind: GetDesiredStateResponse.Kind._fromInt(0),
        architecture: GetDesiredStateResponse.Architecture._fromInt(0),
        image: '',
        securityGroup: GetDesiredStateResponse.SecurityGroup._fromInt(0),
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.NewMachine>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.id) {
        json['id'] = msg.id
      }
      if (msg.realm) {
        json['realm'] = msg.realm
      }
      if (msg.kind && GetDesiredStateResponseJSON.Kind._toInt(msg.kind)) {
        json['kind'] = msg.kind
      }
      if (msg.architecture && GetDesiredStateResponseJSON.Architecture._toInt(msg.architecture)) {
        json['architecture'] = msg.architecture
      }
      if (msg.image) {
        json['image'] = msg.image
      }
      if (msg.securityGroup && GetDesiredStateResponseJSON.SecurityGroup._toInt(msg.securityGroup)) {
        json['securityGroup'] = msg.securityGroup
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (msg: GetDesiredStateResponse.NewMachine, json: any): GetDesiredStateResponse.NewMachine {
      const _id = json['id']
      if (_id) {
        msg.id = _id
      }
      const _realm = json['realm']
      if (_realm) {
        msg.realm = _realm
      }
      const _kind = json['kind']
      if (_kind) {
        msg.kind = _kind
      }
      const _architecture = json['architecture']
      if (_architecture) {
        msg.architecture = _architecture
      }
      const _image = json['image']
      if (_image) {
        msg.image = _image
      }
      const _securityGroup = json['securityGroup'] ?? json['security_group']
      if (_securityGroup) {
        msg.securityGroup = _securityGroup
      }
      return msg
    },
  },

  NewVolume: {
    /**
     * Serializes GetDesiredStateResponse.NewVolume to JSON.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.NewVolume>): string {
      return JSON.stringify(GetDesiredStateResponseJSON.NewVolume._writeMessage(msg))
    },

    /**
     * Deserializes GetDesiredStateResponse.NewVolume from JSON.
     */
    decode: function (json: string): GetDesiredStateResponse.NewVolume {
      return GetDesiredStateResponseJSON.NewVolume._readMessage(
        GetDesiredStateResponseJSON.NewVolume.initialize(),
        JSON.parse(json),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.NewVolume with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.NewVolume {
      return {
        id: '',
        realm: '',
        kind: GetDesiredStateResponse.Kind._fromInt(0),
        architecture: GetDesiredStateResponse.Architecture._fromInt(0),
        size: 0,
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.NewVolume>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.id) {
        json['id'] = msg.id
      }
      if (msg.realm) {
        json['realm'] = msg.realm
      }
      if (msg.kind && GetDesiredStateResponseJSON.Kind._toInt(msg.kind)) {
        json['kind'] = msg.kind
      }
      if (msg.architecture && GetDesiredStateResponseJSON.Architecture._toInt(msg.architecture)) {
        json['architecture'] = msg.architecture
      }
      if (msg.size) {
        json['size'] = msg.size
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (msg: GetDesiredStateResponse.NewVolume, json: any): GetDesiredStateResponse.NewVolume {
      const _id = json['id']
      if (_id) {
        msg.id = _id
      }
      const _realm = json['realm']
      if (_realm) {
        msg.realm = _realm
      }
      const _kind = json['kind']
      if (_kind) {
        msg.kind = _kind
      }
      const _architecture = json['architecture']
      if (_architecture) {
        msg.architecture = _architecture
      }
      const _size = json['size']
      if (_size) {
        msg.size = _size
      }
      return msg
    },
  },

  MachineChange: {
    /**
     * Serializes GetDesiredStateResponse.MachineChange to JSON.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.MachineChange>): string {
      return JSON.stringify(GetDesiredStateResponseJSON.MachineChange._writeMessage(msg))
    },

    /**
     * Deserializes GetDesiredStateResponse.MachineChange from JSON.
     */
    decode: function (json: string): GetDesiredStateResponse.MachineChange {
      return GetDesiredStateResponseJSON.MachineChange._readMessage(
        GetDesiredStateResponseJSON.MachineChange.initialize(),
        JSON.parse(json),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.MachineChange with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.MachineChange {
      return {
        id: '',
        desiredState: GetDesiredStateResponse.MachineState._fromInt(0),
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.MachineChange>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.id) {
        json['id'] = msg.id
      }
      if (msg.desiredState && GetDesiredStateResponseJSON.MachineState._toInt(msg.desiredState)) {
        json['desiredState'] = msg.desiredState
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.MachineChange,
      json: any,
    ): GetDesiredStateResponse.MachineChange {
      const _id = json['id']
      if (_id) {
        msg.id = _id
      }
      const _desiredState = json['desiredState'] ?? json['desired_state']
      if (_desiredState) {
        msg.desiredState = _desiredState
      }
      return msg
    },
  },

  VolumeChange: {
    /**
     * Serializes GetDesiredStateResponse.VolumeChange to JSON.
     */
    encode: function (msg: Partial<GetDesiredStateResponse.VolumeChange>): string {
      return JSON.stringify(GetDesiredStateResponseJSON.VolumeChange._writeMessage(msg))
    },

    /**
     * Deserializes GetDesiredStateResponse.VolumeChange from JSON.
     */
    decode: function (json: string): GetDesiredStateResponse.VolumeChange {
      return GetDesiredStateResponseJSON.VolumeChange._readMessage(
        GetDesiredStateResponseJSON.VolumeChange.initialize(),
        JSON.parse(json),
      )
    },

    /**
     * Initializes GetDesiredStateResponse.VolumeChange with all fields set to their default value.
     */
    initialize: function (): GetDesiredStateResponse.VolumeChange {
      return {
        id: '',
        desiredState: GetDesiredStateResponse.VolumeState._fromInt(0),
        attachedTo: undefined,
        device: undefined,
      }
    },

    /**
     * @private
     */
    _writeMessage: function (msg: Partial<GetDesiredStateResponse.VolumeChange>): Record<string, unknown> {
      const json: Record<string, unknown> = {}
      if (msg.id) {
        json['id'] = msg.id
      }
      if (msg.desiredState && GetDesiredStateResponseJSON.VolumeState._toInt(msg.desiredState)) {
        json['desiredState'] = msg.desiredState
      }
      if (msg.attachedTo != undefined) {
        json['attachedTo'] = msg.attachedTo
      }
      if (msg.device != undefined) {
        json['device'] = msg.device
      }
      return json
    },

    /**
     * @private
     */
    _readMessage: function (
      msg: GetDesiredStateResponse.VolumeChange,
      json: any,
    ): GetDesiredStateResponse.VolumeChange {
      const _id = json['id']
      if (_id) {
        msg.id = _id
      }
      const _desiredState = json['desiredState'] ?? json['desired_state']
      if (_desiredState) {
        msg.desiredState = _desiredState
      }
      const _attachedTo = json['attachedTo'] ?? json['attached_to']
      if (_attachedTo) {
        msg.attachedTo = _attachedTo
      }
      const _device = json['device']
      if (_device) {
        msg.device = _device
      }
      return msg
    },
  },
}
